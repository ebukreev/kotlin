FILE fqName:<root> fileName:/multicatch.kt
  CLASS CLASS name:MultiCatchTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:<root>.MultiCatchTest
    CONSTRUCTOR visibility:public <> () returnType:<root>.MultiCatchTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () [primary] declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:MultiCatchTest modality:FINAL visibility:public superTypes:[kotlin.Any]'
    FUN name:test1 visibility:public modality:FINAL <> ($this:<root>.MultiCatchTest) returnType:kotlin.Unit
      $this: VALUE_PARAMETER name:<this> type:<root>.MultiCatchTest
      BLOCK_BODY
        TRY type=kotlin.Unit
          try: BLOCK type=kotlin.Unit origin=null
          CATCH parameter=val e: java.lang.IllegalArgumentException{ kotlin.IllegalArgumentException } [val] declared in <root>.MultiCatchTest.test1
            VAR CATCH_PARAMETER name:e type:java.lang.IllegalArgumentException{ kotlin.IllegalArgumentException } [val]
            BLOCK type=kotlin.Unit origin=null
    FUN name:test2 visibility:public modality:FINAL <> ($this:<root>.MultiCatchTest) returnType:kotlin.Unit
      $this: VALUE_PARAMETER name:<this> type:<root>.MultiCatchTest
      BLOCK_BODY
        TRY type=kotlin.Unit
          try: BLOCK type=kotlin.Unit origin=null
          CATCH parameter=val e: java.lang.IllegalArgumentException{ kotlin.IllegalArgumentException } [val] declared in <root>.MultiCatchTest.test2
            VAR CATCH_PARAMETER name:e type:java.lang.IllegalArgumentException{ kotlin.IllegalArgumentException } [val]
            BLOCK type=kotlin.Unit origin=null
          finally: BLOCK type=kotlin.Unit origin=null
    FUN name:test3 visibility:public modality:FINAL <> ($this:<root>.MultiCatchTest) returnType:kotlin.Unit
      $this: VALUE_PARAMETER name:<this> type:<root>.MultiCatchTest
      BLOCK_BODY
        TRY type=kotlin.Unit
          try: BLOCK type=kotlin.Unit origin=null
          CATCH parameter=val e: java.lang.IllegalArgumentException{ kotlin.IllegalArgumentException } [val] declared in <root>.MultiCatchTest.test3
            VAR CATCH_PARAMETER name:e type:java.lang.IllegalArgumentException{ kotlin.IllegalArgumentException } [val]
            BLOCK type=kotlin.Unit origin=null
    FUN name:test4 visibility:public modality:FINAL <> ($this:<root>.MultiCatchTest) returnType:kotlin.Unit
      $this: VALUE_PARAMETER name:<this> type:<root>.MultiCatchTest
      BLOCK_BODY
        TRY type=kotlin.Unit
          try: BLOCK type=kotlin.Unit origin=null
            TRY type=kotlin.Unit
              try: BLOCK type=kotlin.Unit origin=null
              CATCH parameter=val f: java.lang.IllegalStateException{ kotlin.IllegalStateException } [val] declared in <root>.MultiCatchTest.test4
                VAR CATCH_PARAMETER name:f type:java.lang.IllegalStateException{ kotlin.IllegalStateException } [val]
                BLOCK type=kotlin.Unit origin=null
              finally: BLOCK type=kotlin.Unit origin=null
          CATCH parameter=val e: java.lang.IllegalArgumentException{ kotlin.IllegalArgumentException } [val] declared in <root>.MultiCatchTest.test4
            VAR CATCH_PARAMETER name:e type:java.lang.IllegalArgumentException{ kotlin.IllegalArgumentException } [val]
            BLOCK type=kotlin.Unit origin=null
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean [operator] declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
      VALUE_PARAMETER name:other index:0 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int [fake_override]
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String [fake_override]
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
